import re
from django.db import models
from django.core.validators import RegexValidator
from django.utils.html import format_html
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError

from django.core.files.storage import default_storage
from django.templatetags.static import static

User = get_user_model()


class Profile(models.Model):
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name="profile",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    )

    nickname = models.CharField(
        max_length=50,
        unique=True,
        blank=True,
        null=True,
        verbose_name="–ù–∏–∫–Ω–µ–π–º",
        help_text="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º",
    )

    bio = models.TextField(blank=True, verbose_name="–û —Å–µ–±–µ")

    avatar = models.ImageField(
        upload_to="profile_images/", blank=True, null=True, verbose_name="–ê–≤–∞—Ç–∞—Ä"
    )

    contact_number = models.CharField(
        max_length=50,
        blank=True,
        null=True,
        validators=[
            RegexValidator(
                r"^\+998\d{9}$", message="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998xxxxxxxxx"
            )
        ],
        verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    )

    is_seller = models.BooleanField(default=False, verbose_name="–ü—Ä–æ–¥–∞–≤–µ—Ü")

    created_at = models.DateTimeField(
        auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    )

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª–∏"

    def __str__(self):
        return f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user.email}"
    
    # üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π URL –∞–≤–∞—Ç–∞—Ä–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –æ—Ç–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç –∏–∑ static
    @property
    def avatar_safe_url(self) -> str:
        if self.avatar and default_storage.exists(self.avatar.name):
            return self.avatar.url
        return static("img/default/default-avatar.png")

    def avatar_tag(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π URL, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∫–∞ –Ω–µ –ø–∞–¥–∞–ª–∞ –Ω–∞ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–∫–∞—Ö
        return format_html(
            '<img src="{}" width="50" height="50" style="object-fit:cover;border-radius:6px;" />',
            self.avatar_safe_url,
        )

    avatar_tag.short_description = "–ê–≤–∞—Ç–∞—Ä"

    def clean(self):
        # ‚úîÔ∏è –Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º —ç—Ç–æ
        if self.nickname:
            if self.nickname.lower() == "admin":
                raise ValidationError("–ù–∏–∫ 'admin' –∑–∞–ø—Ä–µ—â—ë–Ω.")
            if not re.match(r"^[a-zA-Z0-9_]+$", self.nickname):
                raise ValidationError(
                    "–ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è."
                )

        if self.avatar and self.avatar.size > 2 * 1024 * 1024:
            raise ValidationError("–ê–≤–∞—Ç–∞—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2MB.")

        if self.bio and len(self.bio) > 500:
            raise ValidationError("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤.")

